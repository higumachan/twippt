import socket;
import threading;
from tweepy.streaming import StreamListener, Stream
from tweepy.auth import OAuthHandler
from tweepy.api import API
from threading import Thread, Lock
import datetime
from datetime import timedelta
import time
import base64
import hashlib
import MySQLdb

PORT = 8883;

def get_oauth():
    consumer_key = 'dTFlSvzNIkROO6BfAkTsDQ'
    consumer_secret = 'UnWZeo7rxdx38aVnGhbZSdmiraNgSUnwGuTxYdrvts'
    access_key = '105981624-84OpytBltuseQ1XWx2hTAlhQO9oO8IpSiSnxgL0e'
    access_secret = 'Kh3xAsVLyBiEESfRVpqp1WE4KVZH2w46JlKUU5wOI'
    auth = OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_key, access_secret)
    return auth


def handle(client, s):
    print "-" * 100;
    lock = threading.Lock();

    lock.acquire();
    client.handshake();
    client.recv_init_data();
    lock.release();

    while (1):
        recv_data = s.recv(1024);
        print recv_data;
        
        if (ord(recv_data[1]) >> 4 == 0x8):
            break;
    lock.acquire();
    clients.remove(client);
    lock.release();
    s.close();



class Client:
    def __init__(self, connect):
        self._is_handshake = False;
        self._connect = connect;
        self._tags = [];

    def send(self, data):
        if (self._is_handshake == True):
            header = "\x81";
            header += chr(len(data));
            self._connect.send(header + data);
    def handshake(self):
        handshake_data = self._connect.recv(1024);
        print handshake_data;
        handshake_dict = self.shake2dict(handshake_data);
        seckey = handshake_dict["Sec-WebSocket-Key"];
        seckey += "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
        ackey = base64.b64encode(hashlib.new("sha1", seckey).digest());
        
        result = 'HTTP/1.1 101 Switching Protocols\r\n';
        result += 'Upgrade: websocket\r\n';
        result += 'Connection: Upgrade\r\n';
        result += 'Sec-WebSocket-Accept: %s\r\n\r\n' % (ackey,);
        
        print result;

        self._connect.send(result);

        print "handshake finish";
    
    def recv_init_data(self):
        self._name = self.recv();
        print self._name;
        connector = MySQLdb.connet("");
        cursor = MySQLdb.cursor();
        cursor.execute("SELECT id FROM slide WHERE name = '%s'" % self._name);
        slide_id = cursor.fetchone()[0];
        cursor.execute("SELECT text FROM tag WHERE id IN (SELECT tag_id FROM tag_slide_relation WHERE slide_id = %s)" % slide_id);
        tag_names = cursor.fetchall();
        self._tags = [tag_name[0] for tag_name in tag_names];
        cursor.close();
        connector.close();

    def recv(self):
        data = self._connect.recv(1024);
        header = data[:2];
        mask = data[2:6];
        body = data[6:];
        return "".join([chr(ord(body[i]) ^ ord(mask[i % 4])) for i in range(len(body))]);

    def shake2dict(self, shake):
        result = {};
        rows = shake.split("\r\n");
        for row in rows[1:]:
            if (row != ''):
                l = row.split(': ');
                result[l[0]] = l[1];

        return (result);
    def is_listen_tag(self, tag):
        return (tag in self._tags);

class MyStreamListener(StreamListener):
    def on_status(self, status):
        status.created_at += timedelta(hours=9)
        text = status.text;
        start_index = text.find('#');
        print text[start_index + 1:];
        end_index = text[start_index:].find(" ");
        if (end_index == -1):
            end_index = len(text);
        elif (len(text) != end_index + start_index):
            end_index = end_index + start_index;

        print "start_index:" + str(start_index);
        print "end_index:" + str(end_index);
        tag = text[start_index + 1 : end_index];
        print "tag:" + tag;
        lst = text.split("#" + tag, 2);
        print lst;
        text = lst[0] + lst[1];
        lock = threading.Lock();
        lock.acquire();
        for client in clients:
            if (client.is_listen_tag(tag) == True):
                client.send(tag);
        lock.release();
        
        print(u"{text}".format(text=status.text))

class TwitterThread(Thread):
    def init(self, track):
        auth = get_oauth();
        self.stream = Stream(auth, MyStreamListener());
        self.track = track;
    def run(self):
        self.stream.filter(track=track);


clients = [];

lock = threading.Lock();
s = socket.socket();
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind(('', PORT))
s.listen(1)
thread = TwitterThread();
track = ["#test",];
thread.init(track);
thread.start();
while (True):
    conn, addr = s.accept();
    client = Client(conn);
    lock.acquire();
    clients.append(client);
    lock.release();
    threading.Thread(target=handle, args=(client, s)).start();

